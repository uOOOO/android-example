apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion vers.compileSdk

    defaultConfig {
        minSdkVersion vers.minSdk
        targetSdkVersion vers.compileSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "TMDB_API_KEY", getTMDBApiKey())
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$vers.kotlin"
    implementation "androidx.appcompat:appcompat:$vers.android.appcompat"
    implementation "com.google.dagger:hilt-android:$vers.hilt"
    kapt "com.google.dagger:hilt-android-compiler:$vers.hilt"
    implementation "io.reactivex.rxjava2:rxjava:$vers.rx.java"
    api "com.squareup.okhttp3:okhttp:$vers.okhttp"
    api "com.squareup.retrofit2:retrofit:$vers.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$vers.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$vers.retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$vers.okhttp"
    implementation "com.squareup.moshi:moshi:$vers.moshi"
    implementation "com.squareup.moshi:moshi-adapters:$vers.moshi"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$vers.moshi"

    debugImplementation "com.github.ChuckerTeam.Chucker:library:$vers.chucker"
    releaseImplementation "com.github.ChuckerTeam.Chucker:library-no-op:$vers.chucker"

    testImplementation "junit:junit:$vers.junit"
    testImplementation "io.mockk:mockk:$vers.mockk"
    androidTestImplementation "androidx.test:runner:$vers.android.test.runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$vers.android.test.espressoCore"

    implementation project(':domain')
}

def getTMDBApiKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    if (!properties.containsKey("TMDB_API_KEY")) {
        throw new GradleException('Not found TMDB_API_KEY in local.properties.')
    }
    return properties.getProperty("TMDB_API_KEY")
}
